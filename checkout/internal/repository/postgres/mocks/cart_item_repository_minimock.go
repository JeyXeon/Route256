package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/repository/postgres.CartItemRepository -o ./mocks/cart_item_repository_minimock.go -n CartItemRepositoryMock

import (
	"context"
	"route256/checkout/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CartItemRepositoryMock implements postgres.CartItemRepository
type CartItemRepositoryMock struct {
	t minimock.Tester

	funcAddItem          func(ctx context.Context, userId int64, item *model.CartItem) (err error)
	inspectFuncAddItem   func(ctx context.Context, userId int64, item *model.CartItem)
	afterAddItemCounter  uint64
	beforeAddItemCounter uint64
	AddItemMock          mCartItemRepositoryMockAddItem

	funcDeleteItem          func(ctx context.Context, userId int64, item *model.CartItem) (err error)
	inspectFuncDeleteItem   func(ctx context.Context, userId int64, item *model.CartItem)
	afterDeleteItemCounter  uint64
	beforeDeleteItemCounter uint64
	DeleteItemMock          mCartItemRepositoryMockDeleteItem

	funcGetItem          func(ctx context.Context, userId int64, sku uint32) (cp1 *model.CartItem, err error)
	inspectFuncGetItem   func(ctx context.Context, userId int64, sku uint32)
	afterGetItemCounter  uint64
	beforeGetItemCounter uint64
	GetItemMock          mCartItemRepositoryMockGetItem

	funcGetItems          func(ctx context.Context, userId int64) (cpa1 []*model.CartItem, err error)
	inspectFuncGetItems   func(ctx context.Context, userId int64)
	afterGetItemsCounter  uint64
	beforeGetItemsCounter uint64
	GetItemsMock          mCartItemRepositoryMockGetItems

	funcRemoveItems          func(ctx context.Context, userId int64, item *model.CartItem) (err error)
	inspectFuncRemoveItems   func(ctx context.Context, userId int64, item *model.CartItem)
	afterRemoveItemsCounter  uint64
	beforeRemoveItemsCounter uint64
	RemoveItemsMock          mCartItemRepositoryMockRemoveItems
}

// NewCartItemRepositoryMock returns a mock for postgres.CartItemRepository
func NewCartItemRepositoryMock(t minimock.Tester) *CartItemRepositoryMock {
	m := &CartItemRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddItemMock = mCartItemRepositoryMockAddItem{mock: m}
	m.AddItemMock.callArgs = []*CartItemRepositoryMockAddItemParams{}

	m.DeleteItemMock = mCartItemRepositoryMockDeleteItem{mock: m}
	m.DeleteItemMock.callArgs = []*CartItemRepositoryMockDeleteItemParams{}

	m.GetItemMock = mCartItemRepositoryMockGetItem{mock: m}
	m.GetItemMock.callArgs = []*CartItemRepositoryMockGetItemParams{}

	m.GetItemsMock = mCartItemRepositoryMockGetItems{mock: m}
	m.GetItemsMock.callArgs = []*CartItemRepositoryMockGetItemsParams{}

	m.RemoveItemsMock = mCartItemRepositoryMockRemoveItems{mock: m}
	m.RemoveItemsMock.callArgs = []*CartItemRepositoryMockRemoveItemsParams{}

	return m
}

type mCartItemRepositoryMockAddItem struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockAddItemExpectation
	expectations       []*CartItemRepositoryMockAddItemExpectation

	callArgs []*CartItemRepositoryMockAddItemParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockAddItemExpectation specifies expectation struct of the CartItemRepository.AddItem
type CartItemRepositoryMockAddItemExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockAddItemParams
	results *CartItemRepositoryMockAddItemResults
	Counter uint64
}

// CartItemRepositoryMockAddItemParams contains parameters of the CartItemRepository.AddItem
type CartItemRepositoryMockAddItemParams struct {
	ctx    context.Context
	userId int64
	item   *model.CartItem
}

// CartItemRepositoryMockAddItemResults contains results of the CartItemRepository.AddItem
type CartItemRepositoryMockAddItemResults struct {
	err error
}

// Expect sets up expected params for CartItemRepository.AddItem
func (mmAddItem *mCartItemRepositoryMockAddItem) Expect(ctx context.Context, userId int64, item *model.CartItem) *mCartItemRepositoryMockAddItem {
	if mmAddItem.mock.funcAddItem != nil {
		mmAddItem.mock.t.Fatalf("CartItemRepositoryMock.AddItem mock is already set by Set")
	}

	if mmAddItem.defaultExpectation == nil {
		mmAddItem.defaultExpectation = &CartItemRepositoryMockAddItemExpectation{}
	}

	mmAddItem.defaultExpectation.params = &CartItemRepositoryMockAddItemParams{ctx, userId, item}
	for _, e := range mmAddItem.expectations {
		if minimock.Equal(e.params, mmAddItem.defaultExpectation.params) {
			mmAddItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddItem.defaultExpectation.params)
		}
	}

	return mmAddItem
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.AddItem
func (mmAddItem *mCartItemRepositoryMockAddItem) Inspect(f func(ctx context.Context, userId int64, item *model.CartItem)) *mCartItemRepositoryMockAddItem {
	if mmAddItem.mock.inspectFuncAddItem != nil {
		mmAddItem.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.AddItem")
	}

	mmAddItem.mock.inspectFuncAddItem = f

	return mmAddItem
}

// Return sets up results that will be returned by CartItemRepository.AddItem
func (mmAddItem *mCartItemRepositoryMockAddItem) Return(err error) *CartItemRepositoryMock {
	if mmAddItem.mock.funcAddItem != nil {
		mmAddItem.mock.t.Fatalf("CartItemRepositoryMock.AddItem mock is already set by Set")
	}

	if mmAddItem.defaultExpectation == nil {
		mmAddItem.defaultExpectation = &CartItemRepositoryMockAddItemExpectation{mock: mmAddItem.mock}
	}
	mmAddItem.defaultExpectation.results = &CartItemRepositoryMockAddItemResults{err}
	return mmAddItem.mock
}

// Set uses given function f to mock the CartItemRepository.AddItem method
func (mmAddItem *mCartItemRepositoryMockAddItem) Set(f func(ctx context.Context, userId int64, item *model.CartItem) (err error)) *CartItemRepositoryMock {
	if mmAddItem.defaultExpectation != nil {
		mmAddItem.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.AddItem method")
	}

	if len(mmAddItem.expectations) > 0 {
		mmAddItem.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.AddItem method")
	}

	mmAddItem.mock.funcAddItem = f
	return mmAddItem.mock
}

// When sets expectation for the CartItemRepository.AddItem which will trigger the result defined by the following
// Then helper
func (mmAddItem *mCartItemRepositoryMockAddItem) When(ctx context.Context, userId int64, item *model.CartItem) *CartItemRepositoryMockAddItemExpectation {
	if mmAddItem.mock.funcAddItem != nil {
		mmAddItem.mock.t.Fatalf("CartItemRepositoryMock.AddItem mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockAddItemExpectation{
		mock:   mmAddItem.mock,
		params: &CartItemRepositoryMockAddItemParams{ctx, userId, item},
	}
	mmAddItem.expectations = append(mmAddItem.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.AddItem return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockAddItemExpectation) Then(err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockAddItemResults{err}
	return e.mock
}

// AddItem implements postgres.CartItemRepository
func (mmAddItem *CartItemRepositoryMock) AddItem(ctx context.Context, userId int64, item *model.CartItem) (err error) {
	mm_atomic.AddUint64(&mmAddItem.beforeAddItemCounter, 1)
	defer mm_atomic.AddUint64(&mmAddItem.afterAddItemCounter, 1)

	if mmAddItem.inspectFuncAddItem != nil {
		mmAddItem.inspectFuncAddItem(ctx, userId, item)
	}

	mm_params := &CartItemRepositoryMockAddItemParams{ctx, userId, item}

	// Record call args
	mmAddItem.AddItemMock.mutex.Lock()
	mmAddItem.AddItemMock.callArgs = append(mmAddItem.AddItemMock.callArgs, mm_params)
	mmAddItem.AddItemMock.mutex.Unlock()

	for _, e := range mmAddItem.AddItemMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddItem.AddItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddItem.AddItemMock.defaultExpectation.Counter, 1)
		mm_want := mmAddItem.AddItemMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockAddItemParams{ctx, userId, item}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddItem.t.Errorf("CartItemRepositoryMock.AddItem got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddItem.AddItemMock.defaultExpectation.results
		if mm_results == nil {
			mmAddItem.t.Fatal("No results are set for the CartItemRepositoryMock.AddItem")
		}
		return (*mm_results).err
	}
	if mmAddItem.funcAddItem != nil {
		return mmAddItem.funcAddItem(ctx, userId, item)
	}
	mmAddItem.t.Fatalf("Unexpected call to CartItemRepositoryMock.AddItem. %v %v %v", ctx, userId, item)
	return
}

// AddItemAfterCounter returns a count of finished CartItemRepositoryMock.AddItem invocations
func (mmAddItem *CartItemRepositoryMock) AddItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddItem.afterAddItemCounter)
}

// AddItemBeforeCounter returns a count of CartItemRepositoryMock.AddItem invocations
func (mmAddItem *CartItemRepositoryMock) AddItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddItem.beforeAddItemCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.AddItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddItem *mCartItemRepositoryMockAddItem) Calls() []*CartItemRepositoryMockAddItemParams {
	mmAddItem.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockAddItemParams, len(mmAddItem.callArgs))
	copy(argCopy, mmAddItem.callArgs)

	mmAddItem.mutex.RUnlock()

	return argCopy
}

// MinimockAddItemDone returns true if the count of the AddItem invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockAddItemDone() bool {
	for _, e := range m.AddItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddItemCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddItem != nil && mm_atomic.LoadUint64(&m.afterAddItemCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddItemInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockAddItemInspect() {
	for _, e := range m.AddItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.AddItem with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddItemCounter) < 1 {
		if m.AddItemMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.AddItem")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.AddItem with params: %#v", *m.AddItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddItem != nil && mm_atomic.LoadUint64(&m.afterAddItemCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.AddItem")
	}
}

type mCartItemRepositoryMockDeleteItem struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockDeleteItemExpectation
	expectations       []*CartItemRepositoryMockDeleteItemExpectation

	callArgs []*CartItemRepositoryMockDeleteItemParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockDeleteItemExpectation specifies expectation struct of the CartItemRepository.DeleteItem
type CartItemRepositoryMockDeleteItemExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockDeleteItemParams
	results *CartItemRepositoryMockDeleteItemResults
	Counter uint64
}

// CartItemRepositoryMockDeleteItemParams contains parameters of the CartItemRepository.DeleteItem
type CartItemRepositoryMockDeleteItemParams struct {
	ctx    context.Context
	userId int64
	item   *model.CartItem
}

// CartItemRepositoryMockDeleteItemResults contains results of the CartItemRepository.DeleteItem
type CartItemRepositoryMockDeleteItemResults struct {
	err error
}

// Expect sets up expected params for CartItemRepository.DeleteItem
func (mmDeleteItem *mCartItemRepositoryMockDeleteItem) Expect(ctx context.Context, userId int64, item *model.CartItem) *mCartItemRepositoryMockDeleteItem {
	if mmDeleteItem.mock.funcDeleteItem != nil {
		mmDeleteItem.mock.t.Fatalf("CartItemRepositoryMock.DeleteItem mock is already set by Set")
	}

	if mmDeleteItem.defaultExpectation == nil {
		mmDeleteItem.defaultExpectation = &CartItemRepositoryMockDeleteItemExpectation{}
	}

	mmDeleteItem.defaultExpectation.params = &CartItemRepositoryMockDeleteItemParams{ctx, userId, item}
	for _, e := range mmDeleteItem.expectations {
		if minimock.Equal(e.params, mmDeleteItem.defaultExpectation.params) {
			mmDeleteItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteItem.defaultExpectation.params)
		}
	}

	return mmDeleteItem
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.DeleteItem
func (mmDeleteItem *mCartItemRepositoryMockDeleteItem) Inspect(f func(ctx context.Context, userId int64, item *model.CartItem)) *mCartItemRepositoryMockDeleteItem {
	if mmDeleteItem.mock.inspectFuncDeleteItem != nil {
		mmDeleteItem.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.DeleteItem")
	}

	mmDeleteItem.mock.inspectFuncDeleteItem = f

	return mmDeleteItem
}

// Return sets up results that will be returned by CartItemRepository.DeleteItem
func (mmDeleteItem *mCartItemRepositoryMockDeleteItem) Return(err error) *CartItemRepositoryMock {
	if mmDeleteItem.mock.funcDeleteItem != nil {
		mmDeleteItem.mock.t.Fatalf("CartItemRepositoryMock.DeleteItem mock is already set by Set")
	}

	if mmDeleteItem.defaultExpectation == nil {
		mmDeleteItem.defaultExpectation = &CartItemRepositoryMockDeleteItemExpectation{mock: mmDeleteItem.mock}
	}
	mmDeleteItem.defaultExpectation.results = &CartItemRepositoryMockDeleteItemResults{err}
	return mmDeleteItem.mock
}

// Set uses given function f to mock the CartItemRepository.DeleteItem method
func (mmDeleteItem *mCartItemRepositoryMockDeleteItem) Set(f func(ctx context.Context, userId int64, item *model.CartItem) (err error)) *CartItemRepositoryMock {
	if mmDeleteItem.defaultExpectation != nil {
		mmDeleteItem.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.DeleteItem method")
	}

	if len(mmDeleteItem.expectations) > 0 {
		mmDeleteItem.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.DeleteItem method")
	}

	mmDeleteItem.mock.funcDeleteItem = f
	return mmDeleteItem.mock
}

// When sets expectation for the CartItemRepository.DeleteItem which will trigger the result defined by the following
// Then helper
func (mmDeleteItem *mCartItemRepositoryMockDeleteItem) When(ctx context.Context, userId int64, item *model.CartItem) *CartItemRepositoryMockDeleteItemExpectation {
	if mmDeleteItem.mock.funcDeleteItem != nil {
		mmDeleteItem.mock.t.Fatalf("CartItemRepositoryMock.DeleteItem mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockDeleteItemExpectation{
		mock:   mmDeleteItem.mock,
		params: &CartItemRepositoryMockDeleteItemParams{ctx, userId, item},
	}
	mmDeleteItem.expectations = append(mmDeleteItem.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.DeleteItem return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockDeleteItemExpectation) Then(err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockDeleteItemResults{err}
	return e.mock
}

// DeleteItem implements postgres.CartItemRepository
func (mmDeleteItem *CartItemRepositoryMock) DeleteItem(ctx context.Context, userId int64, item *model.CartItem) (err error) {
	mm_atomic.AddUint64(&mmDeleteItem.beforeDeleteItemCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteItem.afterDeleteItemCounter, 1)

	if mmDeleteItem.inspectFuncDeleteItem != nil {
		mmDeleteItem.inspectFuncDeleteItem(ctx, userId, item)
	}

	mm_params := &CartItemRepositoryMockDeleteItemParams{ctx, userId, item}

	// Record call args
	mmDeleteItem.DeleteItemMock.mutex.Lock()
	mmDeleteItem.DeleteItemMock.callArgs = append(mmDeleteItem.DeleteItemMock.callArgs, mm_params)
	mmDeleteItem.DeleteItemMock.mutex.Unlock()

	for _, e := range mmDeleteItem.DeleteItemMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteItem.DeleteItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteItem.DeleteItemMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteItem.DeleteItemMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockDeleteItemParams{ctx, userId, item}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteItem.t.Errorf("CartItemRepositoryMock.DeleteItem got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteItem.DeleteItemMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteItem.t.Fatal("No results are set for the CartItemRepositoryMock.DeleteItem")
		}
		return (*mm_results).err
	}
	if mmDeleteItem.funcDeleteItem != nil {
		return mmDeleteItem.funcDeleteItem(ctx, userId, item)
	}
	mmDeleteItem.t.Fatalf("Unexpected call to CartItemRepositoryMock.DeleteItem. %v %v %v", ctx, userId, item)
	return
}

// DeleteItemAfterCounter returns a count of finished CartItemRepositoryMock.DeleteItem invocations
func (mmDeleteItem *CartItemRepositoryMock) DeleteItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteItem.afterDeleteItemCounter)
}

// DeleteItemBeforeCounter returns a count of CartItemRepositoryMock.DeleteItem invocations
func (mmDeleteItem *CartItemRepositoryMock) DeleteItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteItem.beforeDeleteItemCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.DeleteItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteItem *mCartItemRepositoryMockDeleteItem) Calls() []*CartItemRepositoryMockDeleteItemParams {
	mmDeleteItem.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockDeleteItemParams, len(mmDeleteItem.callArgs))
	copy(argCopy, mmDeleteItem.callArgs)

	mmDeleteItem.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteItemDone returns true if the count of the DeleteItem invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockDeleteItemDone() bool {
	for _, e := range m.DeleteItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteItemCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteItem != nil && mm_atomic.LoadUint64(&m.afterDeleteItemCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteItemInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockDeleteItemInspect() {
	for _, e := range m.DeleteItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.DeleteItem with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteItemCounter) < 1 {
		if m.DeleteItemMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.DeleteItem")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.DeleteItem with params: %#v", *m.DeleteItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteItem != nil && mm_atomic.LoadUint64(&m.afterDeleteItemCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.DeleteItem")
	}
}

type mCartItemRepositoryMockGetItem struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockGetItemExpectation
	expectations       []*CartItemRepositoryMockGetItemExpectation

	callArgs []*CartItemRepositoryMockGetItemParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockGetItemExpectation specifies expectation struct of the CartItemRepository.GetItem
type CartItemRepositoryMockGetItemExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockGetItemParams
	results *CartItemRepositoryMockGetItemResults
	Counter uint64
}

// CartItemRepositoryMockGetItemParams contains parameters of the CartItemRepository.GetItem
type CartItemRepositoryMockGetItemParams struct {
	ctx    context.Context
	userId int64
	sku    uint32
}

// CartItemRepositoryMockGetItemResults contains results of the CartItemRepository.GetItem
type CartItemRepositoryMockGetItemResults struct {
	cp1 *model.CartItem
	err error
}

// Expect sets up expected params for CartItemRepository.GetItem
func (mmGetItem *mCartItemRepositoryMockGetItem) Expect(ctx context.Context, userId int64, sku uint32) *mCartItemRepositoryMockGetItem {
	if mmGetItem.mock.funcGetItem != nil {
		mmGetItem.mock.t.Fatalf("CartItemRepositoryMock.GetItem mock is already set by Set")
	}

	if mmGetItem.defaultExpectation == nil {
		mmGetItem.defaultExpectation = &CartItemRepositoryMockGetItemExpectation{}
	}

	mmGetItem.defaultExpectation.params = &CartItemRepositoryMockGetItemParams{ctx, userId, sku}
	for _, e := range mmGetItem.expectations {
		if minimock.Equal(e.params, mmGetItem.defaultExpectation.params) {
			mmGetItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetItem.defaultExpectation.params)
		}
	}

	return mmGetItem
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.GetItem
func (mmGetItem *mCartItemRepositoryMockGetItem) Inspect(f func(ctx context.Context, userId int64, sku uint32)) *mCartItemRepositoryMockGetItem {
	if mmGetItem.mock.inspectFuncGetItem != nil {
		mmGetItem.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.GetItem")
	}

	mmGetItem.mock.inspectFuncGetItem = f

	return mmGetItem
}

// Return sets up results that will be returned by CartItemRepository.GetItem
func (mmGetItem *mCartItemRepositoryMockGetItem) Return(cp1 *model.CartItem, err error) *CartItemRepositoryMock {
	if mmGetItem.mock.funcGetItem != nil {
		mmGetItem.mock.t.Fatalf("CartItemRepositoryMock.GetItem mock is already set by Set")
	}

	if mmGetItem.defaultExpectation == nil {
		mmGetItem.defaultExpectation = &CartItemRepositoryMockGetItemExpectation{mock: mmGetItem.mock}
	}
	mmGetItem.defaultExpectation.results = &CartItemRepositoryMockGetItemResults{cp1, err}
	return mmGetItem.mock
}

// Set uses given function f to mock the CartItemRepository.GetItem method
func (mmGetItem *mCartItemRepositoryMockGetItem) Set(f func(ctx context.Context, userId int64, sku uint32) (cp1 *model.CartItem, err error)) *CartItemRepositoryMock {
	if mmGetItem.defaultExpectation != nil {
		mmGetItem.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.GetItem method")
	}

	if len(mmGetItem.expectations) > 0 {
		mmGetItem.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.GetItem method")
	}

	mmGetItem.mock.funcGetItem = f
	return mmGetItem.mock
}

// When sets expectation for the CartItemRepository.GetItem which will trigger the result defined by the following
// Then helper
func (mmGetItem *mCartItemRepositoryMockGetItem) When(ctx context.Context, userId int64, sku uint32) *CartItemRepositoryMockGetItemExpectation {
	if mmGetItem.mock.funcGetItem != nil {
		mmGetItem.mock.t.Fatalf("CartItemRepositoryMock.GetItem mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockGetItemExpectation{
		mock:   mmGetItem.mock,
		params: &CartItemRepositoryMockGetItemParams{ctx, userId, sku},
	}
	mmGetItem.expectations = append(mmGetItem.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.GetItem return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockGetItemExpectation) Then(cp1 *model.CartItem, err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockGetItemResults{cp1, err}
	return e.mock
}

// GetItem implements postgres.CartItemRepository
func (mmGetItem *CartItemRepositoryMock) GetItem(ctx context.Context, userId int64, sku uint32) (cp1 *model.CartItem, err error) {
	mm_atomic.AddUint64(&mmGetItem.beforeGetItemCounter, 1)
	defer mm_atomic.AddUint64(&mmGetItem.afterGetItemCounter, 1)

	if mmGetItem.inspectFuncGetItem != nil {
		mmGetItem.inspectFuncGetItem(ctx, userId, sku)
	}

	mm_params := &CartItemRepositoryMockGetItemParams{ctx, userId, sku}

	// Record call args
	mmGetItem.GetItemMock.mutex.Lock()
	mmGetItem.GetItemMock.callArgs = append(mmGetItem.GetItemMock.callArgs, mm_params)
	mmGetItem.GetItemMock.mutex.Unlock()

	for _, e := range mmGetItem.GetItemMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetItem.GetItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetItem.GetItemMock.defaultExpectation.Counter, 1)
		mm_want := mmGetItem.GetItemMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockGetItemParams{ctx, userId, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetItem.t.Errorf("CartItemRepositoryMock.GetItem got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetItem.GetItemMock.defaultExpectation.results
		if mm_results == nil {
			mmGetItem.t.Fatal("No results are set for the CartItemRepositoryMock.GetItem")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetItem.funcGetItem != nil {
		return mmGetItem.funcGetItem(ctx, userId, sku)
	}
	mmGetItem.t.Fatalf("Unexpected call to CartItemRepositoryMock.GetItem. %v %v %v", ctx, userId, sku)
	return
}

// GetItemAfterCounter returns a count of finished CartItemRepositoryMock.GetItem invocations
func (mmGetItem *CartItemRepositoryMock) GetItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItem.afterGetItemCounter)
}

// GetItemBeforeCounter returns a count of CartItemRepositoryMock.GetItem invocations
func (mmGetItem *CartItemRepositoryMock) GetItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItem.beforeGetItemCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.GetItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetItem *mCartItemRepositoryMockGetItem) Calls() []*CartItemRepositoryMockGetItemParams {
	mmGetItem.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockGetItemParams, len(mmGetItem.callArgs))
	copy(argCopy, mmGetItem.callArgs)

	mmGetItem.mutex.RUnlock()

	return argCopy
}

// MinimockGetItemDone returns true if the count of the GetItem invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockGetItemDone() bool {
	for _, e := range m.GetItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetItemCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItem != nil && mm_atomic.LoadUint64(&m.afterGetItemCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetItemInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockGetItemInspect() {
	for _, e := range m.GetItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.GetItem with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetItemCounter) < 1 {
		if m.GetItemMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.GetItem")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.GetItem with params: %#v", *m.GetItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItem != nil && mm_atomic.LoadUint64(&m.afterGetItemCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.GetItem")
	}
}

type mCartItemRepositoryMockGetItems struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockGetItemsExpectation
	expectations       []*CartItemRepositoryMockGetItemsExpectation

	callArgs []*CartItemRepositoryMockGetItemsParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockGetItemsExpectation specifies expectation struct of the CartItemRepository.GetItems
type CartItemRepositoryMockGetItemsExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockGetItemsParams
	results *CartItemRepositoryMockGetItemsResults
	Counter uint64
}

// CartItemRepositoryMockGetItemsParams contains parameters of the CartItemRepository.GetItems
type CartItemRepositoryMockGetItemsParams struct {
	ctx    context.Context
	userId int64
}

// CartItemRepositoryMockGetItemsResults contains results of the CartItemRepository.GetItems
type CartItemRepositoryMockGetItemsResults struct {
	cpa1 []*model.CartItem
	err  error
}

// Expect sets up expected params for CartItemRepository.GetItems
func (mmGetItems *mCartItemRepositoryMockGetItems) Expect(ctx context.Context, userId int64) *mCartItemRepositoryMockGetItems {
	if mmGetItems.mock.funcGetItems != nil {
		mmGetItems.mock.t.Fatalf("CartItemRepositoryMock.GetItems mock is already set by Set")
	}

	if mmGetItems.defaultExpectation == nil {
		mmGetItems.defaultExpectation = &CartItemRepositoryMockGetItemsExpectation{}
	}

	mmGetItems.defaultExpectation.params = &CartItemRepositoryMockGetItemsParams{ctx, userId}
	for _, e := range mmGetItems.expectations {
		if minimock.Equal(e.params, mmGetItems.defaultExpectation.params) {
			mmGetItems.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetItems.defaultExpectation.params)
		}
	}

	return mmGetItems
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.GetItems
func (mmGetItems *mCartItemRepositoryMockGetItems) Inspect(f func(ctx context.Context, userId int64)) *mCartItemRepositoryMockGetItems {
	if mmGetItems.mock.inspectFuncGetItems != nil {
		mmGetItems.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.GetItems")
	}

	mmGetItems.mock.inspectFuncGetItems = f

	return mmGetItems
}

// Return sets up results that will be returned by CartItemRepository.GetItems
func (mmGetItems *mCartItemRepositoryMockGetItems) Return(cpa1 []*model.CartItem, err error) *CartItemRepositoryMock {
	if mmGetItems.mock.funcGetItems != nil {
		mmGetItems.mock.t.Fatalf("CartItemRepositoryMock.GetItems mock is already set by Set")
	}

	if mmGetItems.defaultExpectation == nil {
		mmGetItems.defaultExpectation = &CartItemRepositoryMockGetItemsExpectation{mock: mmGetItems.mock}
	}
	mmGetItems.defaultExpectation.results = &CartItemRepositoryMockGetItemsResults{cpa1, err}
	return mmGetItems.mock
}

// Set uses given function f to mock the CartItemRepository.GetItems method
func (mmGetItems *mCartItemRepositoryMockGetItems) Set(f func(ctx context.Context, userId int64) (cpa1 []*model.CartItem, err error)) *CartItemRepositoryMock {
	if mmGetItems.defaultExpectation != nil {
		mmGetItems.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.GetItems method")
	}

	if len(mmGetItems.expectations) > 0 {
		mmGetItems.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.GetItems method")
	}

	mmGetItems.mock.funcGetItems = f
	return mmGetItems.mock
}

// When sets expectation for the CartItemRepository.GetItems which will trigger the result defined by the following
// Then helper
func (mmGetItems *mCartItemRepositoryMockGetItems) When(ctx context.Context, userId int64) *CartItemRepositoryMockGetItemsExpectation {
	if mmGetItems.mock.funcGetItems != nil {
		mmGetItems.mock.t.Fatalf("CartItemRepositoryMock.GetItems mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockGetItemsExpectation{
		mock:   mmGetItems.mock,
		params: &CartItemRepositoryMockGetItemsParams{ctx, userId},
	}
	mmGetItems.expectations = append(mmGetItems.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.GetItems return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockGetItemsExpectation) Then(cpa1 []*model.CartItem, err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockGetItemsResults{cpa1, err}
	return e.mock
}

// GetItems implements postgres.CartItemRepository
func (mmGetItems *CartItemRepositoryMock) GetItems(ctx context.Context, userId int64) (cpa1 []*model.CartItem, err error) {
	mm_atomic.AddUint64(&mmGetItems.beforeGetItemsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetItems.afterGetItemsCounter, 1)

	if mmGetItems.inspectFuncGetItems != nil {
		mmGetItems.inspectFuncGetItems(ctx, userId)
	}

	mm_params := &CartItemRepositoryMockGetItemsParams{ctx, userId}

	// Record call args
	mmGetItems.GetItemsMock.mutex.Lock()
	mmGetItems.GetItemsMock.callArgs = append(mmGetItems.GetItemsMock.callArgs, mm_params)
	mmGetItems.GetItemsMock.mutex.Unlock()

	for _, e := range mmGetItems.GetItemsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cpa1, e.results.err
		}
	}

	if mmGetItems.GetItemsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetItems.GetItemsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetItems.GetItemsMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockGetItemsParams{ctx, userId}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetItems.t.Errorf("CartItemRepositoryMock.GetItems got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetItems.GetItemsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetItems.t.Fatal("No results are set for the CartItemRepositoryMock.GetItems")
		}
		return (*mm_results).cpa1, (*mm_results).err
	}
	if mmGetItems.funcGetItems != nil {
		return mmGetItems.funcGetItems(ctx, userId)
	}
	mmGetItems.t.Fatalf("Unexpected call to CartItemRepositoryMock.GetItems. %v %v", ctx, userId)
	return
}

// GetItemsAfterCounter returns a count of finished CartItemRepositoryMock.GetItems invocations
func (mmGetItems *CartItemRepositoryMock) GetItemsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItems.afterGetItemsCounter)
}

// GetItemsBeforeCounter returns a count of CartItemRepositoryMock.GetItems invocations
func (mmGetItems *CartItemRepositoryMock) GetItemsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItems.beforeGetItemsCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.GetItems.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetItems *mCartItemRepositoryMockGetItems) Calls() []*CartItemRepositoryMockGetItemsParams {
	mmGetItems.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockGetItemsParams, len(mmGetItems.callArgs))
	copy(argCopy, mmGetItems.callArgs)

	mmGetItems.mutex.RUnlock()

	return argCopy
}

// MinimockGetItemsDone returns true if the count of the GetItems invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockGetItemsDone() bool {
	for _, e := range m.GetItemsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetItemsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItems != nil && mm_atomic.LoadUint64(&m.afterGetItemsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetItemsInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockGetItemsInspect() {
	for _, e := range m.GetItemsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.GetItems with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetItemsCounter) < 1 {
		if m.GetItemsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.GetItems")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.GetItems with params: %#v", *m.GetItemsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItems != nil && mm_atomic.LoadUint64(&m.afterGetItemsCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.GetItems")
	}
}

type mCartItemRepositoryMockRemoveItems struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockRemoveItemsExpectation
	expectations       []*CartItemRepositoryMockRemoveItemsExpectation

	callArgs []*CartItemRepositoryMockRemoveItemsParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockRemoveItemsExpectation specifies expectation struct of the CartItemRepository.RemoveItems
type CartItemRepositoryMockRemoveItemsExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockRemoveItemsParams
	results *CartItemRepositoryMockRemoveItemsResults
	Counter uint64
}

// CartItemRepositoryMockRemoveItemsParams contains parameters of the CartItemRepository.RemoveItems
type CartItemRepositoryMockRemoveItemsParams struct {
	ctx    context.Context
	userId int64
	item   *model.CartItem
}

// CartItemRepositoryMockRemoveItemsResults contains results of the CartItemRepository.RemoveItems
type CartItemRepositoryMockRemoveItemsResults struct {
	err error
}

// Expect sets up expected params for CartItemRepository.RemoveItems
func (mmRemoveItems *mCartItemRepositoryMockRemoveItems) Expect(ctx context.Context, userId int64, item *model.CartItem) *mCartItemRepositoryMockRemoveItems {
	if mmRemoveItems.mock.funcRemoveItems != nil {
		mmRemoveItems.mock.t.Fatalf("CartItemRepositoryMock.RemoveItems mock is already set by Set")
	}

	if mmRemoveItems.defaultExpectation == nil {
		mmRemoveItems.defaultExpectation = &CartItemRepositoryMockRemoveItemsExpectation{}
	}

	mmRemoveItems.defaultExpectation.params = &CartItemRepositoryMockRemoveItemsParams{ctx, userId, item}
	for _, e := range mmRemoveItems.expectations {
		if minimock.Equal(e.params, mmRemoveItems.defaultExpectation.params) {
			mmRemoveItems.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRemoveItems.defaultExpectation.params)
		}
	}

	return mmRemoveItems
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.RemoveItems
func (mmRemoveItems *mCartItemRepositoryMockRemoveItems) Inspect(f func(ctx context.Context, userId int64, item *model.CartItem)) *mCartItemRepositoryMockRemoveItems {
	if mmRemoveItems.mock.inspectFuncRemoveItems != nil {
		mmRemoveItems.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.RemoveItems")
	}

	mmRemoveItems.mock.inspectFuncRemoveItems = f

	return mmRemoveItems
}

// Return sets up results that will be returned by CartItemRepository.RemoveItems
func (mmRemoveItems *mCartItemRepositoryMockRemoveItems) Return(err error) *CartItemRepositoryMock {
	if mmRemoveItems.mock.funcRemoveItems != nil {
		mmRemoveItems.mock.t.Fatalf("CartItemRepositoryMock.RemoveItems mock is already set by Set")
	}

	if mmRemoveItems.defaultExpectation == nil {
		mmRemoveItems.defaultExpectation = &CartItemRepositoryMockRemoveItemsExpectation{mock: mmRemoveItems.mock}
	}
	mmRemoveItems.defaultExpectation.results = &CartItemRepositoryMockRemoveItemsResults{err}
	return mmRemoveItems.mock
}

// Set uses given function f to mock the CartItemRepository.RemoveItems method
func (mmRemoveItems *mCartItemRepositoryMockRemoveItems) Set(f func(ctx context.Context, userId int64, item *model.CartItem) (err error)) *CartItemRepositoryMock {
	if mmRemoveItems.defaultExpectation != nil {
		mmRemoveItems.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.RemoveItems method")
	}

	if len(mmRemoveItems.expectations) > 0 {
		mmRemoveItems.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.RemoveItems method")
	}

	mmRemoveItems.mock.funcRemoveItems = f
	return mmRemoveItems.mock
}

// When sets expectation for the CartItemRepository.RemoveItems which will trigger the result defined by the following
// Then helper
func (mmRemoveItems *mCartItemRepositoryMockRemoveItems) When(ctx context.Context, userId int64, item *model.CartItem) *CartItemRepositoryMockRemoveItemsExpectation {
	if mmRemoveItems.mock.funcRemoveItems != nil {
		mmRemoveItems.mock.t.Fatalf("CartItemRepositoryMock.RemoveItems mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockRemoveItemsExpectation{
		mock:   mmRemoveItems.mock,
		params: &CartItemRepositoryMockRemoveItemsParams{ctx, userId, item},
	}
	mmRemoveItems.expectations = append(mmRemoveItems.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.RemoveItems return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockRemoveItemsExpectation) Then(err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockRemoveItemsResults{err}
	return e.mock
}

// RemoveItems implements postgres.CartItemRepository
func (mmRemoveItems *CartItemRepositoryMock) RemoveItems(ctx context.Context, userId int64, item *model.CartItem) (err error) {
	mm_atomic.AddUint64(&mmRemoveItems.beforeRemoveItemsCounter, 1)
	defer mm_atomic.AddUint64(&mmRemoveItems.afterRemoveItemsCounter, 1)

	if mmRemoveItems.inspectFuncRemoveItems != nil {
		mmRemoveItems.inspectFuncRemoveItems(ctx, userId, item)
	}

	mm_params := &CartItemRepositoryMockRemoveItemsParams{ctx, userId, item}

	// Record call args
	mmRemoveItems.RemoveItemsMock.mutex.Lock()
	mmRemoveItems.RemoveItemsMock.callArgs = append(mmRemoveItems.RemoveItemsMock.callArgs, mm_params)
	mmRemoveItems.RemoveItemsMock.mutex.Unlock()

	for _, e := range mmRemoveItems.RemoveItemsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRemoveItems.RemoveItemsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRemoveItems.RemoveItemsMock.defaultExpectation.Counter, 1)
		mm_want := mmRemoveItems.RemoveItemsMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockRemoveItemsParams{ctx, userId, item}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRemoveItems.t.Errorf("CartItemRepositoryMock.RemoveItems got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRemoveItems.RemoveItemsMock.defaultExpectation.results
		if mm_results == nil {
			mmRemoveItems.t.Fatal("No results are set for the CartItemRepositoryMock.RemoveItems")
		}
		return (*mm_results).err
	}
	if mmRemoveItems.funcRemoveItems != nil {
		return mmRemoveItems.funcRemoveItems(ctx, userId, item)
	}
	mmRemoveItems.t.Fatalf("Unexpected call to CartItemRepositoryMock.RemoveItems. %v %v %v", ctx, userId, item)
	return
}

// RemoveItemsAfterCounter returns a count of finished CartItemRepositoryMock.RemoveItems invocations
func (mmRemoveItems *CartItemRepositoryMock) RemoveItemsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemoveItems.afterRemoveItemsCounter)
}

// RemoveItemsBeforeCounter returns a count of CartItemRepositoryMock.RemoveItems invocations
func (mmRemoveItems *CartItemRepositoryMock) RemoveItemsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemoveItems.beforeRemoveItemsCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.RemoveItems.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRemoveItems *mCartItemRepositoryMockRemoveItems) Calls() []*CartItemRepositoryMockRemoveItemsParams {
	mmRemoveItems.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockRemoveItemsParams, len(mmRemoveItems.callArgs))
	copy(argCopy, mmRemoveItems.callArgs)

	mmRemoveItems.mutex.RUnlock()

	return argCopy
}

// MinimockRemoveItemsDone returns true if the count of the RemoveItems invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockRemoveItemsDone() bool {
	for _, e := range m.RemoveItemsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RemoveItemsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRemoveItemsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRemoveItems != nil && mm_atomic.LoadUint64(&m.afterRemoveItemsCounter) < 1 {
		return false
	}
	return true
}

// MinimockRemoveItemsInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockRemoveItemsInspect() {
	for _, e := range m.RemoveItemsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.RemoveItems with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RemoveItemsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRemoveItemsCounter) < 1 {
		if m.RemoveItemsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.RemoveItems")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.RemoveItems with params: %#v", *m.RemoveItemsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRemoveItems != nil && mm_atomic.LoadUint64(&m.afterRemoveItemsCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.RemoveItems")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CartItemRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddItemInspect()

		m.MinimockDeleteItemInspect()

		m.MinimockGetItemInspect()

		m.MinimockGetItemsInspect()

		m.MinimockRemoveItemsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CartItemRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CartItemRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddItemDone() &&
		m.MinimockDeleteItemDone() &&
		m.MinimockGetItemDone() &&
		m.MinimockGetItemsDone() &&
		m.MinimockRemoveItemsDone()
}
